name: CI_snapshot

on:
  push:
    branches: [ '**' ]
  workflow_run:
    workflows: ["CI release"]
    branches: [ '**' ]
    types:
      - completed
  workflow_dispatch:

jobs:
  build:
    name: Upload Snapshot
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          # must specify password for PG Docker container image, see: https://registry.hub.docker.com/_/postgres?tab=description&page=1&name=10
          POSTGRES_USER: orbisgis
          POSTGRES_PASSWORD: orbisgis
          POSTGRES_DB: orbisgis_db
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      # Checkout the source code of the project
      - name: Checkout
        uses: actions/checkout@v4

      # Install the GPG secret key
      - name: Import GPG Key
        run: |
          echo "${{ secrets.GPG_PUBLIC_KEY }}" | gpg --import
          echo "${{ secrets.GPG_SECRET_KEY }}" | gpg --import --no-tty --batch --yes
        env:
          GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
        if: ${{(env.GPG_PUBLIC_KEY != null)}}

      # Setup the jdk using version 11 of Adoptium Temurin
      - name: Setup java 11 using Adoptium Temurin
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_SECRET_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      
      #Setup graalvm
      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.3'
          java-version: '11'
          components: 'native-image'
          set-java-home: true

      # Deploy the snapshot
      - name: Deploy
        run: mvn deploy -ntp --batch-mode
        env:
          MAVEN_USERNAME: ${{ secrets.MVN_CENTRAL_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MVN_CENTRAL_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        if: ${{(env.MAVEN_USERNAME != null)}}

      # Build distribution artifact
      - name: Distribution
        run: mvn -ntp --batch-mode -Dmaven.test.skip=true -P standalone package

      #Production of the archive     
      - name: Unzip production artifacts  
        run: unzip h2gis-dist/target/h2gis-standalone-bin.zip
      - name: Archive production artifacts  
        uses: actions/upload-artifact@v4
        with:        
          name: h2gis-standalone-bin
          path: h2gis-standalone/
